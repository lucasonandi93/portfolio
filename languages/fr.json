{
    "nav-bar": {
        "inicio": "ACCUEIL",
        "about_me": "À PROPOS DE MOI",
        "skills": "COMPÉTENCES",
        "curriculum": "CURRICULUM",
        "portfolio": "PORTFOLIO",
        "contact": "CONTACT",
        "dark_mode": "Mode Sombre",
        "light_mode": "Mode Clair",
        "project-symfony": "Projet Symfony",
        "project-java": "Projet Java",
        "apirest": "API REST",
        "project-eni": "Projet ENI",
        "project-wp": "Projet WP",
        "more": "Plus"
    },
    "banner-photo": {
        "description": "Développeur Web et Web mobile"
    },
    "a-propos": {
        "title": "À PROPOS DE MOI",
        "description": "Je suis un Uruguayen vivant en France depuis 3 ans. J'ai obtenu mon diplôme de développeur web et web mobile et je suis à la recherche d'une entreprise qui me donne l'opportunité de  démontrer mon engagement. Actuellement, je suis en formation bac +4 à l'ESGI de Rennes et je recherche  un contrat d'alternance en apprentissage.",
        "personal": "Données personnelles",
        "birth": "Date de naissance",
        "tel": "Téléphone",
        "email": "Email",
        "adresse": "Adresse",
        "interes": "Centres d'intérêt",
        "animal": "Animaux",
        "animal-description": "Passionné par les animaux surtout les chiens.",
        "read": "Lire",
        "read-description": "J'adore les thrillers judiciaires de John Grisham.",
        "chess": "Échecs",
        "chess-description": "Fan d'échecs et de jeux de société en général.",
        "ia": "Nouveau grand intérêt pour l'intelligence artificielle, les nouvelles technologies et leur impact sur la société d'aujourd'hui.",
        "button-text": "Télécharger le CV"
    },

    "contacto":{
        "title": "CONTACT",
        "username": "Votre Prénom",
        "tel": "Numéro de Téléphone",
        "adresse": "Adresse e-mail",
        "subject": "Sujet",
        "message": "Message",
        "sendmessage": "Envoyer le message"
    },

    "project-series": {
        "title": "PROJET SERIES",
        "sub-title": "Description du Projet",
        "description": "L'objectif de ce projet était de développer une interface de site web permettant d'afficher une liste de séries disponibles, accompagnée de leurs descriptions et des saisons potentielles pour téléchargement. De plus, un système d'inscription et de connexion a été mis en place, ainsi qu'un formulaire pour le chargement de nouvelles séries et saisons. Au cours de l'exécution de ce projet, j'ai eu l'opportunité d'utiliser le framework Symfony, ce qui m'a offert une structure claire du Modèle-Vue-Contrôleur (MVC).",
        "front-end": "La partie Front-end",
        "front-end-connexion": "Conception du formulaire de connexion :",
        "front-end-connexion-description": "J'ai utilisé le moteur de template Twig pour créer le formulaire de connexion et défini les champs nécessaires tels que le nom d'utilisateur et le mot de passe. De plus, j'ai mis en place des contraintes de validation pour assurer une saisie correcte des informations, tout en prenant en charge la gestion des messages d'erreur correspondants afin d'améliorer l'expérience utilisateur.",
        "front-end-form": "Conception du formulaire de création de nouvel utilisateur :",
        "front-end-form-description": "J'ai utilisé les fonctionnalités de formulaire de Symfony pour créer le formulaire d'inscription des nouveaux utilisateurs.",
        "front-end-liste": "Affichage de la liste des séries avec une image :",
        "front-end-liste-description": "J'ai utilisé Twig pour afficher dynamiquement la liste des séries disponibles sur le site en récupérant les données des séries à partir du backend. Pour ce faire, j'ai utilisé des entités et des requêtes Doctrine pour obtenir les informations nécessaires. Ensuite, j'ai transmis ces données au template Twig, ce qui m'a permis d'afficher les séries avec leurs images respectives de manière dynamique.",
        "front-end-sesson":"Affichage des descriptions des séries et de leurs saisons respectives :",
        "front-end-sesson-description":"Pour chaque série de la liste, j'ai implémenté la fonctionnalité d'affichage d'une description détaillée de la série et de ses saisons.",
        "back-end": "La partie Back-end",
        "back-end-description": "Dans la création du site web Séries, la partie backend implique la création et la configuration de la base de données, ainsi que la mise en œuvre des entités, des contrôleurs et des repositories. Ces composants travaillent ensemble pour permettre l'interaction avec la base de données et la gestion des fonctionnalités requises sur le site web Séries.",
        "back-end-description1": "En définissant les attributs de chaque table à partir des instructions fournies par Symfony, nous finalisons la création de la base de données en utilisant la commande (php bin/console doctrine:schema:update). Symfony génère automatiquement d'autres composants nécessaires tels que les formulaires, les contrôleurs, les repositories, les getters et les setters. Ces composants facilitent le développement du site web.",
        "back-end-description2": "Les formulaires sont préconfigurés pour interagir avec les entités et prendre en charge la validation des données. Les contrôleurs gèrent les actions liées aux entités et répondent aux requêtes des utilisateurs. Les repositories fournissent des méthodes pré-définies pour les opérations de requête sur la base de données. Les getters et les setters permettent d'accéder et de modifier les attributs de manière contrôlée. Enfin, Symfony offre des fonctions de base telles que la sérialisation et la désérialisation des entités.",
        "back-end-description3": "Il est important de noter que ces composants générés par Symfony nécessitent des personnalisations et des modifications pour répondre aux besoins spécifiques de l'application. Cela nous permet d'appliquer la logique métier appropriée et d'assurer le bon fonctionnement de notre site web Séries.",
        "back-end-photo-sql-description": "Exemple de code SQL utilisé pour la création de la base de données.",
        "back-end-photo-orm-description": "Exemple d'entité utilisant un ORM (Doctrine).",
        "back-end-photo-route-description": "Exemple d'une route du contrôleur pour la récupération de la liste des séries.",
        "back-end-photo-qb-description": "Exemple de requêtes SQL utilisant QueryBuilder pour la récupération d'informations dans la base de données",
        "back-end-photo-test-description": "Exemple de tests unitaires pour vérifier le bon fonctionnement de chaque fonction",
        "back-end-photo-role-description": "Exemple de gestion des rôles et des contrôles d'accès de l'application",
        "back-end-func": "Pour la réalisation des fonctionnalités décrites, j'ai utilisé les outils et technologies suivants :",
        "back-end-symfony":"En Symfony 5.4, j'ai utilisé le framework Symfony pour développer l'application web, profitant de sa structure robuste et de ses composants puissants qui facilitent le processus de développement.",
        "back-end-wamp":"Pour mon environnement de développement local, j'ai opté pour Wamp64 (Windows, Apache, MySQL, PHP), exploitant ainsi le serveur web Apache, la base de données MySQL et le langage de script PHP via Wamp64.",
        "back-end-phpadm":"Pour la gestion de la base de données MySQL, j'ai utilisé phpMyAdmin comme interface web. Cette plateforme m'a permis de créer, configurer et interagir avec les tables et les données, assurant une administration efficace de la base de données.",
        "back-end-storm":"L'IDE PhpStorm a été mon choix pour le développement de l'application web. Cet IDE spécialement conçu pour le PHP offre des fonctionnalités avancées telles que la complétion de code, le débogage et la gestion des dépendances.",
        "back-end-doctrine":"Dans le processus de développement, j'ai également intégré Doctrine, un ORM (Object-Relational Mapping), pour faciliter la gestion des entités et des opérations de base de données. Doctrine m'a permis de manipuler les données de manière plus intuitive en utilisant des objets plutôt que des requêtes SQL directes.",
        "back-end-twig":"Twig : J'ai utilisé Twig comme moteur de template pour générer les vues HTML de l'application. Twig facilite la séparation de la logique métier du code HTML en utilisant des templates et des variables.",
        "back-end-htmlcss":"HTML et CSS : J'ai utilisé HTML pour structurer le contenu des pages web et CSS pour styliser et mettre en forme les éléments visuels de l'application.",
        "back-end-sql":"Le langage SQL a été essentiel pour la création et la manipulation des tables de la base de données. J'ai rédigé des requêtes SQL pour effectuer des opérations telles que la création de tables, l'insertion de données et la récupération des informations nécessaires.",
        "back-end-php":"Quant à PHP, en tant que langage de script côté serveur, il a été utilisé pour le développement de la logique métier de l'application. PHP était responsable de la communication avec la base de données, du traitement des données et de la génération des réponses aux requêtes des utilisateurs.",
        "back-end-conclu":"En combinant ces outils et technologies, j'ai réussi à développer l'application web en respectant les bonnes pratiques de développement, tout en garantissant la sécurité, la performance et une maintenance facilitée. La partie backend de l'application Séries a ainsi pu être créée avec une interaction efficace avec la base de données."

    },
    "project-java":{
        "title": "PROJET ENCHERES",
        "sub-title": "Description du Projet",
        "description": "L'objectif de ce projet était de développer une interface pour une application web d'enchères, permettant aux utilisateurs de faire des offres sur les articles disponibles dans la limite de temps de l'enchère. Chaque utilisateur peut mettre en vente ses propres articles aux enchères et déterminer les caractéristiques de l'enchère. Cette application a été développée dans le cadre d'un projet d'équipe visant à mettre en pratique nos connaissances acquises au cours de notre formation. La collaboration au sein de l'équipe nous a permis de partager des idées, de répartir les tâches et de capitaliser sur les compétences individuelles de chaque membre, ce qui a abouti à la création réussie du site web d'enchères. Nous étions un groupe de quatre membres qui ont collaboré ensemble pour développer l'application. Nous avons partagé les tâches, échangé des idées et tiré parti des compétences individuelles de chaque membre pour atteindre nos objectifs communs. Travailler en équipe nous a permis d'apprendre à communiquer efficacement et de résoudre des problèmes ensemble.",
        "front-end": "La partie Front-end",
        "front-end-connexion": "Conception du formulaire de connexion :",
        "front-end-connexion-description":"J'ai utilisé les JSP (JavaServer Pages) pour créer le formulaire de connexion, en définissant les champs nécessaires, ainsi que les fonctionnalités de validation et de gestion des erreurs pour assurer une saisie correcte des informations.",
        "front-end-form": "Conception du formulaire de création de nouvel utilisateur :",
        "front-end-form-description":"J'ai utilisé les JSP pour créer le formulaire d'inscription des nouveaux utilisateurs, en définissant les champs requis et en mettant en place des contrôles de validation pour garantir la saisie correcte des informations.",
        "front-end-profil":"Affichage d'un profil :",
        "front-end-profil-description": "J'ai utilisé les JSP pour afficher le profil d'un utilisateur. J'ai récupéré les informations de profil depuis la base de données et les ai affichées de manière dynamique.",
        "front-end-liste": "Lister les articles :",
        "front-end-liste-description": "J'ai utilisé les JSP pour afficher une liste des articles disponibles. J'ai récupéré les données des articles depuis la base de données et les ai affichées de manière dynamique.",
        "back-end": "La partie Back-end",
        "back-end-description": "Création de la base de données à l'aide de SQL Server : Nous avons utilisé Microsoft SQL Server Management Studio pour créer la base de données nécessaire au site web d'enchères. Cet outil nous a permis de concevoir et de gérer la structure de la base de données, ainsi que d'établir des relations entre les tables.",
        "back-end-description1": "Mise en œuvre de la Programmation Orientée Objet (POO) : La partie backend de l'application a été structurée en suivant les principes de la Programmation Orientée Objet. Nous avons utilisé des classes et des objets pour représenter les différents composants et entités de l'application, tels que les utilisateurs, les enchères, les offres, etc. Nous avons appliqué des concepts tels que l'héritage, l'encapsulation et le polymorphisme pour créer une architecture modulaire et réutilisable dans le backend.",
        "back-end-description2": "Utilisation de JDBC pour interagir avec la base de données : Pour communiquer avec la base de données SQL Server, nous avons utilisé JDBC (Java Database Connectivity), une API standard de Java permettant d'accéder et de manipuler des bases de données relationnelles. Grâce à JDBC, nous avons pu effectuer des opérations telles que l'insertion, la mise à jour, la suppression et la consultation des données dans la base de données. La classe JDBCImpl.java était responsable de l'exécution des requêtes SQL nécessaires pour l'interaction avec la base de données.",
        "back-end-description3": "Ainsi, en combinant l'utilisation de JDBC pour interagir avec la base de données SQL Server et l'application de la POO pour structurer et gérer la logique métier de l'application backend, nous avons pu développer un site web d'enchères fonctionnel et évolutif, où les utilisateurs peuvent participer efficacement aux enchères en ligne.",
        "back-end-photo-sql-description": "Exemple de code SQL utilisé pour la création de la base de données.",
        "back-end-photo-context-description": "Fragment de code XML permettant la configuration de contexte pour une application web dans l'environnement Java EE (Enterprise Edition). Dans ce contexte, une ressource de base de données JDBC (Java Database Connectivity) est définie, permettant à l'application d'établir des connexions avec une base de données Microsoft SQL Server.",
        "back-end-photo-schemabdd-description": "Schéma de base de données.",
        "back-end-photo-poo-description": "Exemple de la classe de la POO pour les utilisateurs",
        "back-end-photo-manager-description": "La classe UtilisateurManager en Java est responsable de gérer les opérations liées aux utilisateurs dans l'application. Elle offre des fonctions pour créer, mettre à jour, supprimer et récupérer des informations sur les utilisateurs dans une base de données. Elle propose également des méthodes pour authentifier les utilisateurs, vérifier l'existence par pseudonyme, effectuer des validations de format et gérer les erreurs spécifiques à la logique métier. En résumé, la classe facilite la gestion complète des utilisateurs dans l'application.",
        "back-end-photo-daojdbc-description": "UtilisateurDaoJdbcImpl Connexion de l'utilisateur",
        "back-end-photo-insertion-description": "UtilisateurDaoJdbcImpl L'insertion de l'utilisateur",
        "back-end-photo-modification-description": "UtilisateurDaoJdbcImpl Modification de l'utilisateur",
        "back-end-func": "Pour la réalisation des fonctionnalités décrites, j'ai utilisé les outils et technologies suivants :",
        "back-end-eclipse": "J'ai développé l'application en utilisant l'IDE Eclipse, profitant de ses fonctionnalités avancées telles que l'éditeur de code, le débogage et son intégration avec les serveurs d'application Java EE.",
        "back-end-htmlcss":"HTML et CSS : J'ai utilisé HTML pour structurer le contenu des pages web et CSS pour styliser et mettre en forme les éléments visuels de l'application.",
        "back-end-bootstrap": "J'ai utilisé la bibliothèque Bootstrap pour faciliter la conception d'une interface utilisateur réactive et esthétique.",
        "back-end-javaee": "Du côté de la plateforme, nous avons opté pour Java Enterprise Edition (Java EE) pour développer l'application web.",
        "back-end-sqlserver": "Concernant la gestion de la base de données, nous avons utilisé Microsoft SQL Server Management Studio. Cet outil nous a permis de concevoir la structure de la base de données et d'établir les relations entre les tables, contribuant ainsi à la robustesse et à l'efficacité du site web d'enchères.",
        "back-end-apache": "Pour le déploiement de l'application, nous avons choisi le serveur web Apache, un choix populaire qui prend en charge Java EE et qui a facilité le déploiement de notre application web Java.",
        "back-end-java": "Java 17, la version la plus récente de Java, a été utilisé pour le développement, tirant parti de ses fonctionnalités améliorées et des améliorations de performances, contribuant ainsi à la création d'un site web d'enchères performant et évolutif.",
        "back-end-sql": "Le langage SQL a été essentiel pour la création et la manipulation des tables de la base de données. J'ai rédigé des requêtes SQL pour effectuer des opérations telles que la création de tables, l'insertion de données et la récupération des informations nécessaires."
      },
      "apirest":{
        "title": "API-REST NODE-JS",
        "sub-title": "Description du Projet",
        "description": "Cette application Node.js, en mettant en œuvre une API REST avec le support de Mongoose en tant que Object-Document Mapper (ODM), interagit efficacement avec une base de données MongoDB pour gérer la création et l'administration d'utilisateurs, d'amplificateurs et de configurations. La connexion à MongoDB est établie à travers Mongoose, qui facilite la définition de schémas et offre des fonctionnalités supplémentaires telles que la validation des données et la création de modèles. Cette application gère les opérations CRUD, allant de la création d'utilisateurs avec des requêtes POST à l'obtention de détails d'amplificateurs via des requêtes GET, la mise à jour de configurations avec des requêtes PUT et la suppression d'utilisateurs avec des requêtes DELETE.",
        "description1": "En mon projet, j'ai utilisé MongoDB comme base de données et j'ai découvert qu'il offre une grande flexibilité et une capacité à gérer des données non structurées. La structure basée sur des documents et l'évolutivité horizontale de MongoDB se sont bien adaptées aux besoins de l'application, me permettant de stocker et de récupérer des informations de manière facile et efficace. Pour interagir avec MongoDB dans mon application Node.js, j'ai utilisé Mongoose. Ce choix m'a facilité l'exécution des opérations CRUD, telles que la création et la recherche de documents.",
        "description2": "Utilisation de JSON Web Tokens (JWT) et Passport pour mettre en place un système d'authentification sur des routes spécifiques. En générant et en vérifiant les JWT, il assure la validité et l'absence d'expiration des jetons, fournissant ainsi une couche de sécurité. La stratégie JWT de Passport est configurée avec une clé secrète et est utilisée pour protéger des routes, exigeant que les clients incluent des jetons valides dans leurs demandes. Si un jeton est invalide ou a expiré, l'accès aux ressources protégées est refusé, garantissant ainsi l'authentification avant d'autoriser l'accès à des ressources sensibles.",
        "photo1-desc": "Base de données MongoDB",
        "photo2-desc": "Dans le développement de mon application, j'ai intégré Swagger pour documenter de manière efficace mon API REST. Grâce à Swagger, je dispose désormais d'une documentation interactive détaillant chaque point d'extrémité de l'API, les méthodes disponibles, les paramètres requis et les réponses attendues. Cette approche facilite non seulement la compréhension interne de mon API, mais fournit également aux développeurs externes un guide clair sur la manière d'interagir avec mes services.",
        "photo3-desc": "Dans le développement de mon application, j'ai intégré Postman pour faciliter le test et la gestion de mon API. Grâce à Postman, je bénéficie d'un environnement convivial permettant d'envoyer des requêtes HTTP à mes points d'extrémité, de tester différentes méthodes, d'ajuster les paramètres et d'inspecter les réponses. Cela simplifie considérablement le processus de développement en offrant une plateforme centralisée pour tester et valider le comportement de l'API.",
        "photo4-desc": "El archivo package.json se utiliza para enumerar y gestionar las dependencias del proyecto. En el caso de una API REST en Node.js, esto incluirá módulos y bibliotecas externas que la aplicación utiliza, como Express para el enrutamiento, Mongoose para interactuar con MongoDB, entre otros. Estas dependencias se instalan fácilmente utilizando el comando npm install basado en la información del package.json.",
        "photo5-desc": "Création des modèles nécessaires pour définir la structure des données de l'API",
        "photo6-desc": "Ce code en Node.js utilise JSON Web Tokens (JWT) et Passport.",
        "photo7-desc": "route get-patch",
        "photo8-desc": "Route delete utilisateur",
        "endtext": "Pour la réalisation des fonctionnalités décrites, j'ai utilisé les outils et technologies suivants :",
        "photo1-npm": "(Node Package Manager) Système de gestion de paquets pour Node.js",
        "nextprojects": "Prochainement, plus d'informations sur mes projets."
    }

}