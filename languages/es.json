{
    "nav-bar": {
        "inicio": "INICIO",
        "about_me": "SOBRE MI",
        "skills": "HABILIDADES",
        "curriculum": "CURRICULUM",
        "portfolio": "PORTFOLIO",
        "contact": "CONTACTO",
        "dark_mode": "Modo Oscuro",
        "light_mode": "Modo Claro",
        "project-symfony": "Proyecto Symfony",
        "project-java": "Proyecto Java",
        "apirest": "API REST",
        "project-eni": "Proyecto ENI",
        "project-wp": "Proyecto WP",
        "more": "Más"
    },
    "banner-photo": {
        "description": "Desarrollador Web y Móvil"
    },
    "a-propos": {
        "title": "SOBRE MÍ",
        "description": "Soy un uruguayo que vive en Francia desde hace 3 años. Hace dos años, inicié mi reconversión para convertirme en desarrollador web. Obtuve mi diploma de desarrollador web y web móvil y estoy en búsqueda de una empresa que me brinde la oportunidad de demostrar mi compromiso.",
        "personal": "Datos personales",
        "birth": "Fecha de nacimiento",
        "tel": "Teléfono",
        "email": "Correo electrónico",
        "adresse": "Dirección",
        "interes": "Intereses",
        "animal": "Animales",
        "animal-description": "Apasionado por los animales, especialmente los perros.",
        "read": "Leer",
        "read-description": "Me encantan los thrillers legales de John Grisham.",
        "chess": "Ajedrez",
        "chess-description": "Entusiasta del ajedrez y amante de los juegos de mesa en general.",
        "ia": "Nuevo gran interés en la inteligencia artificial, las nuevas tecnologías y su impacto en la sociedad actual.",
        "button-text": "Descargar CV"
    },
    "contacto": {
        "title": "CONTACTO",
        "username": "Tu Nombre",
        "tel": "Número de Teléfono",
        "adresse": "Dirección de Correo Electrónico",
        "subject": "Tema",
        "message": "Mensaje",
        "sendmessage": "Enviar Mensaje"
    },
    "project-series": {
        "title": "PROYECTO SERIES",
        "sub-title": "Descripción del Proyecto",
        "description": "El objetivo de este proyecto era desarrollar una interfaz de sitio web que mostrara una lista de series disponibles, acompañadas de sus descripciones y las posibles temporadas para su descarga. Además, se implementó un sistema de registro e inicio de sesión, así como un formulario para cargar nuevas series y temporadas. Durante la ejecución de este proyecto, tuve la oportunidad de utilizar el framework Symfony, lo que me proporcionó una estructura clara del Modelo-Vista-Controlador (MVC).",
        "front-end": "La parte Front-end",
        "front-end-connexion": "Diseño del formulario de inicio de sesión:",
        "front-end-connexion-description": "Utilicé el motor de plantillas Twig para crear el formulario de inicio de sesión y definí los campos necesarios como nombre de usuario y contraseña. Además, establecí restricciones de validación para asegurar una entrada correcta de la información, gestionando también los mensajes de error correspondientes para mejorar la experiencia del usuario.",
        "front-end-form": "Diseño del formulario de creación de nuevo usuario:",
        "front-end-form-description": "Utilicé las funcionalidades de formulario de Symfony para crear el formulario de registro de nuevos usuarios.",
        "front-end-liste": "Visualización de la lista de series con una imagen:",
        "front-end-liste-description": "Utilicé Twig para mostrar dinámicamente la lista de series disponibles en el sitio, recuperando los datos de las series desde el backend. Para ello, utilicé entidades y consultas de Doctrine para obtener la información necesaria. Luego, transmití estos datos al motor de plantillas Twig, lo que me permitió mostrar las series con sus respectivas imágenes de manera dinámica.",
        "front-end-sesson": "Visualización de las descripciones de las series y sus respectivas temporadas:",
        "front-end-sesson-description": "Para cada serie de la lista, implementé la funcionalidad de mostrar una descripción detallada de la serie y sus temporadas.",
        "back-end": "La parte Back-end",
        "back-end-description": "En la creación del sitio web Series, la parte del backend implica la creación y configuración de la base de datos, así como la implementación de entidades, controladores y repositorios. Estos componentes trabajan juntos para permitir la interacción con la base de datos y gestionar las funcionalidades requeridas en el sitio web Series.",
        "back-end-description1": "Al definir los atributos de cada tabla según las instrucciones proporcionadas por Symfony, finalizamos la creación de la base de datos utilizando el comando (php bin/console doctrine:schema:update). Symfony genera automáticamente otros componentes necesarios como formularios, controladores, repositorios, getters y setters. Estos componentes facilitan el desarrollo del sitio web.",
        "back-end-description2": "Los formularios están preconfigurados para interactuar con las entidades y admitir la validación de datos. Los controladores manejan las acciones relacionadas con las entidades y responden a las solicitudes de los usuarios. Los repositorios proporcionan métodos predefinidos para las operaciones de consulta en la base de datos. Los getters y setters permiten acceder y modificar los atributos de manera controlada. Finalmente, Symfony ofrece funciones básicas como la serialización y deserialización de entidades.",
        "back-end-description3": "Es importante tener en cuenta que estos componentes generados por Symfony requieren personalizaciones y modificaciones para satisfacer las necesidades específicas de la aplicación. Esto nos permite aplicar la lógica empresarial adecuada y garantizar el buen funcionamiento de nuestro sitio web Series.",
        "back-end-photo-sql-description": "Ejemplo de código SQL utilizado para la creación de la base de datos.",
        "back-end-photo-orm-description": "Ejemplo de entidad utilizando un ORM (Doctrine).",
        "back-end-photo-route-description": "Ejemplo de una ruta del controlador para recuperar la lista de series.",
        "back-end-photo-qb-description": "Ejemplo de consultas SQL utilizando QueryBuilder para la recuperación de información en la base de datos.",
        "back-end-photo-test-description": "Ejemplo de pruebas unitarias para verificar el buen funcionamiento de cada función.",
        "back-end-photo-role-description": "Ejemplo de gestión de roles y controles de acceso de la aplicación.",
        "back-end-func": "Para la realización de las funcionalidades descritas, utilicé las siguientes herramientas y tecnologías:",
        "back-end-symfony": "En Symfony 5.4, utilicé el framework Symfony para desarrollar la aplicación web, aprovechando su estructura robusta y sus potentes componentes que facilitan el proceso de desarrollo.",
        "back-end-wamp": "Para mi entorno de desarrollo local, opté por Wamp64 (Windows, Apache, MySQL, PHP), aprovechando así el servidor web Apache, la base de datos MySQL y el lenguaje de script PHP a través de Wamp64.",
        "back-end-phpadm": "Para la gestión de la base de datos MySQL, utilicé phpMyAdmin como interfaz web. Esta plataforma me permitió crear, configurar e interactuar con las tablas y los datos, asegurando una administración eficiente de la base de datos.",
        "back-end-storm": "La IDE PhpStorm fue mi elección para el desarrollo de la aplicación web. Esta IDE especialmente diseñada para PHP ofrece características avanzadas como autocompletado de código, depuración y gestión de dependencias.",
        "back-end-doctrine": "En el proceso de desarrollo, también integré Doctrine, un ORM (Object-Relational Mapping), para facilitar la gestión de entidades y operaciones de base de datos básicas. Doctrine me permitió manipular los datos de manera más intuitiva utilizando objetos en lugar de consultas SQL directas.",
        "back-end-twig": "Twig: Utilicé Twig como motor de plantillas para generar las vistas HTML de la aplicación. Twig facilita la separación de la lógica empresarial del código HTML mediante el uso de plantillas y variables.",
        "back-end-htmlcss": "HTML y CSS: Utilicé HTML para estructurar el contenido de las páginas web y CSS para estilizar y dar formato a los elementos visuales de la aplicación.",
        "back-end-sql": "El lenguaje SQL fue esencial para la creación y manipulación de las tablas de la base de datos. Escribí consultas SQL para realizar operaciones como la creación de tablas, la inserción de datos y la recuperación de la información necesaria.",
        "back-end-php": "En cuanto a PHP, como lenguaje de script del lado del servidor, se utilizó para el desarrollo de la lógica empresarial de la aplicación. PHP fue responsable de la comunicación con la base de datos, el procesamiento de datos y la generación de respuestas a las solicitudes de los usuarios.",
        "back-end-conclu": "Al combinar estas herramientas y tecnologías, logré desarrollar la aplicación web siguiendo las mejores prácticas de desarrollo, garantizando la seguridad, el rendimiento y una fácil mantenibilidad. La parte del backend de la aplicación Series pudo crearse con una interacción eficaz con la base de datos."
    },
    "project-java": {
        "title": "PROYECTO DE SUBASTAS",
        "sub-title": "Descripción del Proyecto",
        "description": "El objetivo de este proyecto era desarrollar una interfaz para una aplicación web de subastas, permitiendo a los usuarios realizar ofertas en los artículos disponibles dentro del límite de tiempo de la subasta. Cada usuario podía poner a la venta sus propios artículos en subasta y determinar las características de la misma. Esta aplicación fue desarrollada como parte de un proyecto de equipo con el objetivo de poner en práctica los conocimientos adquiridos durante nuestra formación. La colaboración dentro del equipo nos permitió compartir ideas, asignar tareas y capitalizar las habilidades individuales de cada miembro, lo que resultó en la exitosa creación del sitio web de subastas. Éramos un grupo de cuatro miembros que colaboraron para desarrollar la aplicación. Compartimos tareas, intercambiamos ideas y aprovechamos las habilidades individuales de cada miembro para alcanzar nuestros objetivos comunes. Trabajar en equipo nos permitió aprender a comunicarnos eficazmente y resolver problemas juntos.",
        "front-end": "La parte Front-end",
        "front-end-connexion": "Diseño del formulario de inicio de sesión:",
        "front-end-connexion-description": "Utilicé JSP (JavaServer Pages) para crear el formulario de inicio de sesión, definiendo los campos necesarios, así como las funciones de validación y manejo de errores para garantizar una entrada correcta de la información.",
        "front-end-form": "Diseño del formulario de creación de nuevo usuario:",
        "front-end-form-description": "Utilicé JSP para crear el formulario de registro de nuevos usuarios, definiendo los campos requeridos y estableciendo controles de validación para garantizar la correcta entrada de información.",
        "front-end-profil": "Visualización de un perfil:",
        "front-end-profil-description": "Utilicé JSP para mostrar el perfil de un usuario. Recuperé la información del perfil desde la base de datos y la mostré de manera dinámica.",
        "front-end-liste": "Listar los artículos:",
        "front-end-liste-description": "Utilicé JSP para mostrar una lista de artículos disponibles. Recuperé los datos de los artículos desde la base de datos y los mostré de manera dinámica.",
        "back-end": "La parte Back-end",
        "back-end-description": "Creación de la base de datos con SQL Server: Utilizamos Microsoft SQL Server Management Studio para crear la base de datos necesaria para el sitio web de subastas. Esta herramienta nos permitió diseñar y gestionar la estructura de la base de datos, así como establecer relaciones entre las tablas.",
        "back-end-description1": "Implementación de la Programación Orientada a Objetos (POO): La parte backend de la aplicación se estructuró siguiendo los principios de la Programación Orientada a Objetos. Utilizamos clases y objetos para representar los diferentes componentes y entidades de la aplicación, como usuarios, subastas, ofertas, etc. Aplicamos conceptos como la herencia, la encapsulación y el polimorfismo para crear una arquitectura modular y reutilizable en el backend.",
        "back-end-description2": "Uso de JDBC para interactuar con la base de datos: Para comunicarnos con la base de datos SQL Server, utilizamos JDBC (Java Database Connectivity), una API estándar de Java que permite acceder y manipular bases de datos relacionales. Gracias a JDBC, pudimos realizar operaciones como la inserción, actualización, eliminación y consulta de datos en la base de datos. La clase JDBCImpl.java fue responsable de ejecutar las consultas SQL necesarias para la interacción con la base de datos.",
        "back-end-description3": "Así, combinando el uso de JDBC para interactuar con la base de datos SQL Server y la aplicación de POO para estructurar y gestionar la lógica comercial del backend, pudimos desarrollar un sitio web de subastas funcional y escalable, donde los usuarios pueden participar eficientemente en subastas en línea.",
        "back-end-photo-sql-description": "Ejemplo de código SQL utilizado para la creación de la base de datos.",
        "back-end-photo-context-description": "Fragmento de código XML que permite la configuración del contexto para una aplicación web en el entorno Java EE (Enterprise Edition). En este contexto, se define un recurso de base de datos JDBC (Java Database Connectivity), permitiendo que la aplicación establezca conexiones con una base de datos Microsoft SQL Server.",
        "back-end-photo-schemabdd-description": "Esquema de la base de datos.",
        "back-end-photo-poo-description": "Ejemplo de la clase de POO para los usuarios.",
        "back-end-photo-manager-description": "La clase UtilisateurManager en Java es responsable de gestionar las operaciones relacionadas con los usuarios en la aplicación. Ofrece funciones para crear, actualizar, eliminar y recuperar información sobre los usuarios en una base de datos. También ofrece métodos para autenticar usuarios, verificar la existencia por nombre de usuario, realizar validaciones de formato y gestionar errores específicos de la lógica comercial. En resumen, la clase facilita la gestión completa de los usuarios en la aplicación.",
        "back-end-photo-daojdbc-description": "UtilisateurDaoJdbcImpl Conexión del usuario.",
        "back-end-photo-insertion-description": "UtilisateurDaoJdbcImpl Inserción del usuario.",
        "back-end-photo-modification-description": "UtilisateurDaoJdbcImpl Modificación del usuario.",
        "back-end-func": "Para la realización de las funcionalidades descritas, utilicé las siguientes herramientas y tecnologías:",
        "back-end-eclipse": "Desarrollé la aplicación utilizando el entorno integrado de desarrollo (IDE) Eclipse, aprovechando sus funciones avanzadas como el editor de código, la depuración y su integración con los servidores de aplicaciones Java EE.",
        "back-end-htmlcss": "HTML y CSS: Utilicé HTML para estructurar el contenido de las páginas web y CSS para dar estilo y formatear los elementos visuales de la aplicación.",
        "back-end-bootstrap": "Utilicé la biblioteca Bootstrap para facilitar el diseño de una interfaz de usuario receptiva y estética.",
        "back-end-javaee": "En cuanto a la plataforma, optamos por Java Enterprise Edition (Java EE) para desarrollar la aplicación web.",
        "back-end-sqlserver": "Con respecto a la gestión de la base de datos, utilizamos Microsoft SQL Server Management Studio. Esta herramienta nos permitió diseñar la estructura de la base de datos y establecer relaciones entre las tablas, contribuyendo así a la robustez y eficiencia del sitio web de subastas.",
        "back-end-apache": "Para el despliegue de la aplicación, elegimos el servidor web Apache, una elección popular que es compatible con Java EE y que facilitó el despliegue de nuestra aplicación web Java.",
        "back-end-java": "Java 17, la versión más reciente de Java, se utilizó para el desarrollo, aprovechando sus características mejoradas y mejoras de rendimiento, contribuyendo así a la creación de un sitio web de subastas eficiente y escalable.",
        "back-end-sql": "El lenguaje SQL fue esencial para la creación y manipulación de las tablas de la base de datos. Escribí consultas SQL para realizar operaciones como la creación de tablas, la inserción de datos y la recuperación de la información necesaria."
    },
    "apirest": {
        "title": "API-REST NODE.JS",
        "sub-title": "Descripción del Proyecto",
        "description": "Esta aplicación Node.js, al implementar una API REST con el soporte de Mongoose como Object-Document Mapper (ODM), interactúa eficazmente con una base de datos MongoDB para gestionar la creación y administración de usuarios, amplificadores y configuraciones. La conexión a MongoDB se establece a través de Mongoose, que facilita la definición de esquemas y ofrece funciones adicionales como la validación de datos y la creación de modelos. Esta aplicación maneja operaciones CRUD, desde la creación de usuarios con solicitudes POST hasta la obtención de detalles de amplificadores mediante solicitudes GET, la actualización de configuraciones con solicitudes PUT y la eliminación de usuarios con solicitudes DELETE.",
        "description1": "En mi proyecto, utilicé MongoDB como base de datos y descubrí que ofrece una gran flexibilidad y la capacidad de manejar datos no estructurados. La estructura basada en documentos y la escalabilidad horizontal de MongoDB se adaptaron bien a las necesidades de la aplicación, permitiéndome almacenar y recuperar información de manera fácil y eficiente. Para interactuar con MongoDB en mi aplicación Node.js, utilicé Mongoose. Esta elección facilitó la ejecución de operaciones CRUD, como la creación y búsqueda de documentos.",
        "description2": "Uso de JSON Web Tokens (JWT) y Passport para establecer un sistema de autenticación en rutas específicas. Al generar y verificar JWT, asegura la validez y no expiración de los tokens, proporcionando así una capa de seguridad. La estrategia JWT de Passport se configura con una clave secreta y se utiliza para proteger rutas, exigiendo que los clientes incluyan tokens válidos en sus solicitudes. Si un token es inválido o ha caducado, se deniega el acceso a los recursos protegidos, garantizando así la autenticación antes de permitir el acceso a recursos sensibles.",
        "photo1-desc": "Base de Datos MongoDB",
        "photo2-desc": "En el desarrollo de mi aplicación, integré Swagger para documentar de manera efectiva mi API REST. Con Swagger, ahora tengo documentación interactiva que detalla cada punto final de la API, los métodos disponibles, los parámetros requeridos y las respuestas esperadas. Este enfoque no solo facilita la comprensión interna de mi API, sino que también proporciona a los desarrolladores externos una guía clara sobre cómo interactuar con mis servicios.",
        "photo3-desc": "En el desarrollo de mi aplicación, integré Postman para facilitar las pruebas y la gestión de mi API. Con Postman, tengo un entorno amigable para enviar solicitudes HTTP a mis puntos finales, probar diferentes métodos, ajustar parámetros e inspeccionar respuestas. Esto simplifica significativamente el proceso de desarrollo al ofrecer una plataforma centralizada para probar y validar el comportamiento de la API.",
        "photo4-desc": "El archivo package.json se utiliza para enumerar y gestionar las dependencias del proyecto. En el caso de una API REST en Node.js, esto incluirá módulos y bibliotecas externas que la aplicación utiliza, como Express para el enrutamiento, Mongoose para interactuar con MongoDB, entre otros. Estas dependencias se instalan fácilmente utilizando el comando npm install basado en la información del package.json.",
        "photo5-desc": "Creación de los modelos necesarios para definir la estructura de datos de la API",
        "photo6-desc": "Este código en Node.js utiliza JSON Web Tokens (JWT) y Passport.",
        "photo7-desc": "Ruta GET-PATCH",
        "photo8-desc": "Ruta de eliminación de usuario",
        "endtext": "Para la realización de las funcionalidades descritas, utilicé las siguientes herramientas y tecnologías:",
        "photo1-npm": "(Node Package Manager) Sistema de gestión de paquetes para Node.js",
        "nextprojects": "Próximamente, más información sobre mis proyectos futuros."
    },
    "project-eni": {
        "title": "PROYECTO ENI Escuela",
        "sub-title": "Descripción del Proyecto",
        "description": "El objetivo principal de este proyecto fue desarrollar una aplicación destinada a facilitar la planificación y organización de salidas sociales entre los miembros de diferentes campus de estudios. Para llevar a cabo esta iniciativa, elegí utilizar el framework Symfony en conjunto con una base de datos MySQL. Esta aproximación permitió la creación de una plataforma eficiente y fácil de usar, que permite a los usuarios coordinar y participar en diversas salidas sociales.",
        "front-end": "La parte Front-end",
        "front-end-connexion": "Diseño del formulario de inicio de sesión:",
        "front-end-connexion-description": "Utilicé el motor de plantillas Twig para crear el formulario de inicio de sesión y definí los campos necesarios, como el nombre de usuario y la contraseña. Además, implementé restricciones de validación para asegurar una entrada correcta de la información, al mismo tiempo que gestioné los mensajes de error correspondientes para mejorar la experiencia del usuario.",
        "front-end-form": "Diseño del formulario para crear una nueva salida:",
        "front-end-form-description": "En el formulario para crear una nueva salida, se incluyen todos los campos requeridos, incluida la opción de seleccionar un lugar. Si el lugar no está registrado en nuestra base de datos, damos la opción al usuario de agregar un nuevo lugar, que registraremos para salidas futuras.",
        "front-end-liste": "Visualización de la lista de salidas:",
        "front-end-liste-description": "Presentamos una lista de salidas en una tabla que incluye toda su información correspondiente. Además, se configuró una sección de filtros para permitir la especificación en la búsqueda de salidas. En la tabla, se muestran detalles junto con el estado de la salida, con la posibilidad de acceder a su descripción completa. Si la salida está abierta, es posible inscribirse directamente y participar en el evento. Para los organizadores de una salida específica, se les ofrece la posibilidad de modificarla o cancelarla, añadiendo una razón que justifique dichas modificaciones.",
        "front-end-sesson": "Visualización del perfil del usuario:",
        "front-end-sesson-description": "La información del usuario se muestra junto con su foto de perfil. Si el perfil coincide con el usuario conectado, tiene la posibilidad de modificar sus datos.",
        "back-end": "La parte Back-end",
        "back-end-description": "En el proceso de creación de la aplicación, la parte del backend implica la creación y configuración de la base de datos, así como la implementación de entidades, controladores y repositorios. Estos componentes colaboran de manera integrada para facilitar la interacción con la base de datos y gestionar las funciones esenciales de la aplicación.",
        "back-end-description1": "Al definir los atributos de cada tabla según las instrucciones proporcionadas por Symfony, el framework genera automáticamente otros componentes esenciales como formularios, entidades, repositorios, getters y setters. Aunque estos componentes se generan de manera general, simplifican considerablemente el proceso de desarrollo del sitio web.",
        "back-end-description2": "A través de los controladores, gestionamos las solicitudes de los usuarios, proporcionando la información requerida de manera eficaz y segura. Las entidades generadas representan la estructura de la base de datos, y configuramos los formularios para que interactúen correctamente con estas entidades, mejorando así la validación antes de cargarlas en la base de datos.",
        "back-end-description3": "Con el objetivo de optimizar la interacción con la base de datos, implementamos consultas SQL eficientes que nos permiten obtener la máxima cantidad de información con una interacción mínima. Estas consultas están diseñadas para garantizar un funcionamiento fluido de la aplicación y asegurar la seguridad de los datos, contribuyendo así a mejorar la experiencia del usuario.",
        "back-end-description4": "Es importante destacar que estos componentes generados por Symfony requieren personalizaciones y modificaciones para satisfacer las necesidades específicas de la aplicación. Esto nos permite aplicar la lógica empresarial adecuada y garantizar el buen funcionamiento de nuestra aplicación.",
        "back-end-photo-schema-description": "Esquema de la base de datos relacional.",
        "back-end-photo-authentification-description": "Implementación del autenticador de usuarios en Symfony para gestionar la conexión capturando la información de identificación y configurando varios elementos como el token CSRF y la opción de recordar la sesión, con una redirección al último camino de acceso o a un camino predefinido después de una autenticación exitosa.",
        "back-end-photo-route-description": "Ejemplo de una ruta del controlador para recuperar la lista de salidas y administrar filtros.",
        "back-end-photo-qb-description": "Ejemplo de consultas SQL utilizando QueryBuilder para la recuperación de información en la base de datos.",
        "back-end-photo-role-description": "Ejemplo de gestión de roles y controles de acceso de la aplicación.",
        "back-end-func": "Para llevar a cabo las funcionalidades descritas, utilicé las siguientes herramientas y tecnologías:",
        "back-end-symfony": "En Symfony 5.4, utilicé el framework Symfony para desarrollar la aplicación web, aprovechando su estructura robusta y sus potentes componentes que facilitan el proceso de desarrollo.",
        "back-end-wamp": "Para mi entorno de desarrollo local, opté por Wamp64 (Windows, Apache, MySQL, PHP), aprovechando el servidor web Apache, la base de datos MySQL y el lenguaje de script PHP a través de Wamp64.",
        "back-end-phpadm": "Para la gestión de la base de datos MySQL, utilicé phpMyAdmin como interfaz web. Esta plataforma me permitió crear, configurar e interactuar con las tablas y los datos, asegurando una administración eficiente de la base de datos.",
        "back-end-storm": "El IDE PhpStorm fue mi elección para el desarrollo de la aplicación web. Este IDE diseñado especialmente para PHP ofrece funciones avanzadas como autocompletado de código, depuración y gestión de dependencias.",
        "back-end-doctrine": "En el proceso de desarrollo, también integré Doctrine, un ORM (Object-Relational Mapping), para facilitar la gestión de entidades y operaciones de base de datos. Doctrine me permitió manipular los datos de manera más intuitiva utilizando objetos en lugar de consultas SQL directas.",
        "back-end-twig": "Twig: Utilicé Twig como motor de plantillas para generar las vistas HTML de la aplicación. Twig facilita la separación de la lógica empresarial del código HTML mediante el uso de plantillas y variables.",
        "back-end-htmlcss": "HTML y CSS: Utilicé HTML para estructurar el contenido de las páginas web y CSS para dar estilo y formato a los elementos visuales de la aplicación.",
        "back-end-sql": "El lenguaje SQL fue esencial para la creación y manipulación de las tablas de la base de datos. Escribí consultas SQL para realizar operaciones como la creación de tablas, la inserción de datos y la recuperación de la información necesaria.",
        "back-end-php": "En cuanto a PHP, como lenguaje de script del lado del servidor, se utilizó para el desarrollo de la lógica empresarial de la aplicación. PHP fue responsable de la comunicación con la base de datos, el procesamiento de datos y la generación de respuestas a las solicitudes de los usuarios.",
        "back-end-conclu": "Al combinar estas herramientas y tecnologías, logré desarrollar la aplicación web siguiendo las buenas prácticas de desarrollo, garantizando la seguridad, el rendimiento y una fácil mantenibilidad. De esta manera, se pudo crear la parte backend de la aplicación Series con una interacción eficiente con la base de datos."
        }
}