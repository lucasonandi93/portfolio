{
    "nav-bar": {
        "inicio": "HOME",
        "about_me": "ABOUT ME",
        "skills": "SKILLS",
        "curriculum": "CURRICULUM",
        "portfolio": "PORTFOLIO",
        "contact": "CONTACT",
        "dark_mode": "Dark Mode",
        "light_mode": "Light Mode",
        "project-symfony": "Symfony Project",
        "project-java": "Java Project",
        "apirest": "API REST",
        "project-eni": "ENI Project",
        "project-wp": "WP Project",
        "more": "More"
    },
    "banner-photo": {
        "description": "Web and Mobile Developer"
    },
    "a-propos": {
        "title": "ABOUT ME",
        "description": "I am a Uruguayan living in France for 3 years. Two years ago, I started my transition to become a web developer. I obtained my diploma in web and mobile development and I am looking for a company that provides me with the opportunity to demonstrate my commitment. Currently, I am undergoing a bac +4 level training at ESGI in Rennes and I am searching for an apprenticeship contract.",
        "personal": "Personal Information",
        "birth": "Date of Birth",
        "tel": "Phone",
        "email": "Email",
        "adresse": "Address",
        "interes": "Interests",
        "animal": "Animals",
        "animal-description": "Passionate about animals, especially dogs.",
        "read": "Reading",
        "read-description": "I love legal thrillers by John Grisham.",
        "chess": "Chess",
        "chess-description": "Chess enthusiast and board game lover.",
        "ia": "New keen interest in artificial intelligence, new technologies, and their impact on today's society.",
        "button-text": "Download CV"
    },
    "project-series": {
        "title": "SERIES PROJECT",
        "sub-title": "Project Description",
        "description": "The objective of this project was to develop a web interface that displays a list of available series along with their descriptions and potential seasons for download. Additionally, a registration and login system was implemented, along with a form for uploading new series and seasons. During the execution of this project, I had the opportunity to use the Symfony framework, providing me with a clear structure of the Model-View-Controller (MVC).",
        "front-end": "Frontend Part",
        "front-end-connexion": "Design of the login form:",
        "front-end-connexion-description": "I used the Twig template engine to create the login form and defined necessary fields such as username and password. Moreover, I implemented validation constraints to ensure correct input of information, while handling corresponding error messages to enhance the user experience.",
        "front-end-form": "Design of the new user creation form:",
        "front-end-form-description": "I utilized Symfony's form features to create the form for registering new users.",
        "front-end-liste": "Display of the series list with an image:",
        "front-end-liste-description": "I used Twig to dynamically display the list of available series on the site by retrieving series data from the backend. To achieve this, I used entities and Doctrine queries to obtain necessary information. Subsequently, I passed this data to the Twig template, allowing me to dynamically display the series with their respective images.",
        "front-end-sesson": "Display of series descriptions and their respective seasons:",
        "front-end-sesson-description": "For each series in the list, I implemented the feature to display a detailed description of the series and its seasons.",
        "back-end": "Backend Part",
        "back-end-description": "In creating the Series website, the backend part involves creating and configuring the database, as well as implementing entities, controllers, and repositories. These components work together to enable interaction with the database and manage required features on the Series website.",
        "back-end-description1": "By defining attributes for each table based on Symfony's instructions, we finalize the creation of the database using the command (php bin/console doctrine:schema:update). Symfony automatically generates other necessary components such as forms, controllers, repositories, getters, and setters. These components facilitate web development.",
        "back-end-description2": "Forms are preconfigured to interact with entities and support data validation. Controllers handle actions related to entities and respond to user queries. Repositories provide predefined methods for query operations on the database. Getters and setters allow controlled access and modification of attributes. Finally, Symfony offers basic functions such as serialization and deserialization of entities.",
        "back-end-description3": "It is important to note that these components generated by Symfony require customizations and modifications to meet the specific needs of the application. This allows us to apply appropriate business logic and ensure the proper functioning of our Series website.",
        "back-end-photo-sql-description": "Example of SQL code used for creating the database.",
        "back-end-photo-orm-description": "Example of an entity using an ORM (Doctrine).",
        "back-end-photo-route-description": "Example of a controller route for retrieving the list of series.",
        "back-end-photo-qb-description": "Example of SQL queries using QueryBuilder for retrieving information from the database.",
        "back-end-photo-test-description": "Example of unit tests to verify the proper functioning of each function.",
        "back-end-photo-role-description": "Example of role management and application access controls.",
        "back-end-func": "For the implementation of the described functionalities, I used the following tools and technologies:",
        "back-end-symfony": "In Symfony 5.4, I used the Symfony framework to develop the web application, taking advantage of its robust structure and powerful components that facilitate the development process.",
        "back-end-wamp": "For my local development environment, I opted for Wamp64 (Windows, Apache, MySQL, PHP), leveraging the Apache web server, MySQL database, and PHP scripting language via Wamp64.",
        "back-end-phpadm": "For managing the MySQL database, I used phpMyAdmin as a web interface. This platform allowed me to create, configure, and interact with tables and data, ensuring effective database administration.",
        "back-end-storm": "The PhpStorm IDE was my choice for web application development. This IDE, specifically designed for PHP, offers advanced features such as code completion, debugging, and dependency management.",
        "back-end-doctrine": "In the development process, I also integrated Doctrine, an Object-Relational Mapping (ORM), to facilitate the management of entities and database operations. Doctrine allowed me to manipulate data more intuitively using objects rather than direct SQL queries.",
        "back-end-twig": "Twig: I used Twig as the template engine to generate HTML views for the application. Twig facilitates the separation of business logic from HTML code using templates and variables.",
        "back-end-htmlcss": "HTML and CSS: I used HTML to structure the content of web pages and CSS to style and format visual elements of the application.",
        "back-end-sql": "The SQL language was essential for creating and manipulating tables in the database. I wrote SQL queries to perform operations such as creating tables, inserting data, and retrieving necessary information.",
        "back-end-php": "Regarding PHP, as a server-side scripting language, it was used for developing the business logic of the application. PHP was responsible for communication with the database, data processing, and generating responses to user queries.",
        "back-end-conclu": "By combining these tools and technologies, I successfully developed the web application while adhering to development best practices, ensuring security, performance, and easy maintenance. The backend part of the Series application was thus created with effective interaction with the database."
    },
    "project-java": {
        "title": "AUCTION PROJECT",
        "sub-title": "Project Description",
        "description": "The goal of this project was to develop an interface for a web auction application, allowing users to place bids on items available within the time limit of the auction. Each user can auction their own items and determine the auction's characteristics. This application was developed as part of a team project to apply the knowledge acquired during our training. Team collaboration allowed us to share ideas, distribute tasks, and leverage individual skills, resulting in the successful creation of the auction website. We were a group of four members who collaborated to develop the application, sharing tasks, exchanging ideas, and utilizing each member's individual skills to achieve common goals. Working as a team taught us effective communication and collaborative problem-solving.",
        "front-end": "Front-end Section",
        "front-end-connexion": "Login Form Design:",
        "front-end-connexion-description": "I used JavaServer Pages (JSP) to create the login form, defining necessary fields and implementing validation and error handling features to ensure correct input of information.",
        "front-end-form": "New User Registration Form Design:",
        "front-end-form-description": "I used JSP to create the new user registration form, defining required fields and implementing validation controls to ensure correct input of information.",
        "front-end-profil": "Profile Display:",
        "front-end-profil-description": "I used JSP to display a user's profile. I retrieved profile information from the database and displayed it dynamically.",
        "front-end-liste": "List Items:",
        "front-end-liste-description": "I used JSP to display a list of available items. I retrieved item data from the database and displayed it dynamically.",
        "back-end": "Back-end Section",
        "back-end-description": "Database Creation using SQL Server: We used Microsoft SQL Server Management Studio to create the necessary database for the auction website. This tool allowed us to design and manage the database structure, as well as establish relationships between tables.",
        "back-end-description1": "Object-Oriented Programming (OOP) Implementation: The backend of the application was structured following Object-Oriented Programming principles. We used classes and objects to represent different components and entities of the application, such as users, auctions, bids, etc. Concepts like inheritance, encapsulation, and polymorphism were applied to create a modular and reusable architecture in the backend.",
        "back-end-description2": "Use of JDBC to Interact with the Database: To communicate with the SQL Server database, we used Java Database Connectivity (JDBC), a standard Java API for accessing and manipulating relational databases. Through JDBC, we were able to perform operations like insertion, updating, deletion, and querying of data in the database. The JDBCImpl.java class was responsible for executing the necessary SQL queries for database interaction.",
        "back-end-description3": "By combining the use of JDBC to interact with the SQL Server database and applying OOP to structure and manage the business logic of the backend application, we were able to develop a functional and scalable auction website where users can effectively participate in online auctions.",
        "back-end-photo-sql-description": "Example of SQL code used for creating the database.",
        "back-end-photo-context-description": "XML code snippet for configuring context for a web application in the Java EE (Enterprise Edition) environment. In this context, a JDBC (Java Database Connectivity) database resource is defined, allowing the application to establish connections with a Microsoft SQL Server database.",
        "back-end-photo-schemabdd-description": "Database schema.",
        "back-end-photo-poo-description": "Example of the Object-Oriented Programming (OOP) class for users.",
        "back-end-photo-manager-description": "The UserManager class in Java is responsible for managing user-related operations in the application. It provides functions to create, update, delete, and retrieve user information in a database. It also offers methods to authenticate users, check existence by username, perform format validations, and handle business logic-specific errors. In summary, the class facilitates comprehensive user management in the application.",
        "back-end-photo-daojdbc-description": "UserDaoJdbcImpl User connection.",
        "back-end-photo-insertion-description": "UserDaoJdbcImpl User insertion.",
        "back-end-photo-modification-description": "UserDaoJdbcImpl User modification.",
        "back-end-func": "To implement the described functionalities, I used the following tools and technologies:",
        "back-end-eclipse": "I developed the application using the Eclipse IDE, taking advantage of its advanced features such as code editor, debugging, and integration with Java EE application servers.",
        "back-end-htmlcss": "HTML and CSS: I used HTML to structure the content of web pages and CSS to style and format the visual elements of the application.",
        "back-end-bootstrap": "I used the Bootstrap library to facilitate the design of a responsive and aesthetic user interface.",
        "back-end-javaee": "On the platform side, we chose Java Enterprise Edition (Java EE) to develop the web application.",
        "back-end-sqlserver": "For database management, we used Microsoft SQL Server Management Studio. This tool allowed us to design the database structure and establish relationships between tables, contributing to the robustness and efficiency of the auction website.",
        "back-end-apache": "For the deployment of the application, we chose the Apache web server, a popular choice that supports Java EE and facilitated the deployment of our Java web application.",
        "back-end-java": "Java 17, the latest version of Java, was used for development, leveraging its enhanced features and performance improvements, contributing to the creation of a high-performance and scalable auction website.",
        "back-end-sql": "The SQL language was essential for the creation and manipulation of database tables. I wrote SQL queries to perform operations such as table creation, data insertion, and retrieval of necessary information."
    },
    "apirest": {
        "title": "NODE.JS REST API",
        "sub-title": "Project Description",
        "description": "This Node.js application, implementing a REST API with the support of Mongoose as an Object-Document Mapper (ODM), effectively interacts with a MongoDB database to manage the creation and administration of users, amplifiers, and configurations. The connection to MongoDB is established through Mongoose, which facilitates schema definition and offers additional features such as data validation and model creation. This application handles CRUD operations, ranging from creating users with POST requests to fetching amplifier details via GET requests, updating configurations with PUT requests, and deleting users with DELETE requests.",
        "description1": "In my project, I used MongoDB as the database and found that it offers great flexibility and the ability to handle unstructured data. MongoDB's document-based structure and horizontal scalability suited the application's needs well, allowing me to store and retrieve information easily and efficiently. To interact with MongoDB in my Node.js application, I used Mongoose. This choice facilitated the execution of CRUD operations, such as document creation and retrieval.",
        "description2": "Using JSON Web Tokens (JWT) and Passport to implement an authentication system on specific routes. By generating and verifying JWTs, it ensures token validity and non-expiration, providing a security layer. Passport's JWT strategy is configured with a secret key and is used to protect routes, requiring clients to include valid tokens in their requests. If a token is invalid or has expired, access to protected resources is denied, ensuring authentication before allowing access to sensitive resources.",
        "photo1-desc": "MongoDB Database",
        "photo2-desc": "In the development of my application, I integrated Swagger to effectively document my REST API. With Swagger, I now have interactive documentation detailing each API endpoint, available methods, required parameters, and expected responses. This approach not only facilitates internal understanding of my API but also provides external developers with a clear guide on how to interact with my services.",
        "photo3-desc": "In the development of my application, I integrated Postman to facilitate testing and managing my API. With Postman, I have a user-friendly environment to send HTTP requests to my endpoints, test different methods, adjust parameters, and inspect responses. This significantly simplifies the development process by offering a centralized platform for testing and validating API behavior.",
        "photo4-desc": "The package.json file is used to list and manage project dependencies. For a Node.js REST API, this will include modules and external libraries that the application uses, such as Express for routing, Mongoose for interacting with MongoDB, among others. These dependencies are easily installed using the npm install command based on package.json information.",
        "photo5-desc": "Creating the necessary models to define the data structure of the API",
        "photo6-desc": "This Node.js code uses JSON Web Tokens (JWT) and Passport.",
        "photo7-desc": "GET-PATCH route",
        "photo8-desc": "Delete user route",
        "endtext": "To implement the described features, I used the following tools and technologies:",
        "photo1-npm": "(Node Package Manager) Package management system for Node.js",
        "nextprojects": "More information on my upcoming projects coming soon."
      }
}